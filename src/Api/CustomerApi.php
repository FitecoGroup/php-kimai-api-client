<?php

/**
 *
 * Kimai API Client 2020 — NOTICE OF LICENSE
 * This source file is released under MIT license by copyright holders.
 * @copyright 2017-2020 (c) Niko Granö (https://granö.fi)
 * @copyright 2014-2020 (c) Fiteco Group Oy (https://group.fiteco.fi)
 *
 */

/**
 * Kimai 2 - API Docs.
 *
 * JSON API for the Kimai 2 time-tracking software. Read more about its usage in the [API documentation](https://www.kimai.org/documentation/rest-api.html) and then download a [Swagger file](doc.json) for import e.g. in Postman. Be aware: it is not yet considered stable and BC breaks might happen, especially when using code generation. The order of JSON attributes is not guaranteed.
 *
 * The version of the OpenAPI document: 0.6
 *
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiteco\KimaiClient\Api;

use Fiteco\KimaiClient\ApiException;
use Fiteco\KimaiClient\Configuration;
use Fiteco\KimaiClient\HeaderSelector;
use Fiteco\KimaiClient\ObjectSerializer;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;

/**
 * CustomerApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class CustomerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index.
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index.
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiCustomersGet.
     *
     * Returns a collection of customers
     *
     * @param string $visible Visibility status to filter activities (1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;both) (optional)
     * @param string $order   The result order. Allowed values: ASC, DESC (default: ASC) (optional)
     * @param string $orderBy The field by which results will be ordered. Allowed values: id, name (default: name) (optional)
     * @param string $term    Free search term (optional)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\CustomerCollection[]
     */
    public function apiCustomersGet($visible = null, $order = null, $orderBy = null, $term = null)
    {
        [$response] = $this->apiCustomersGetWithHttpInfo($visible, $order, $orderBy, $term);

        return $response;
    }

    /**
     * Operation apiCustomersGetWithHttpInfo.
     *
     * Returns a collection of customers
     *
     * @param string $visible Visibility status to filter activities (1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;both) (optional)
     * @param string $order   The result order. Allowed values: ASC, DESC (default: ASC) (optional)
     * @param string $orderBy The field by which results will be ordered. Allowed values: id, name (default: name) (optional)
     * @param string $term    Free search term (optional)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\CustomerCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiCustomersGetWithHttpInfo($visible = null, $order = null, $orderBy = null, $term = null)
    {
        $request = $this->apiCustomersGetRequest($visible, $order, $orderBy, $term);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\CustomerCollection[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\CustomerCollection[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\CustomerCollection[]';
            $responseBody = $response->getBody();
            if ('\SplFileObject' === $returnType) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\CustomerCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiCustomersGetAsync.
     *
     * Returns a collection of customers
     *
     * @param string $visible Visibility status to filter activities (1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;both) (optional)
     * @param string $order   The result order. Allowed values: ASC, DESC (default: ASC) (optional)
     * @param string $orderBy The field by which results will be ordered. Allowed values: id, name (default: name) (optional)
     * @param string $term    Free search term (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCustomersGetAsync($visible = null, $order = null, $orderBy = null, $term = null)
    {
        return $this->apiCustomersGetAsyncWithHttpInfo($visible, $order, $orderBy, $term)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiCustomersGetAsyncWithHttpInfo.
     *
     * Returns a collection of customers
     *
     * @param string $visible Visibility status to filter activities (1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;both) (optional)
     * @param string $order   The result order. Allowed values: ASC, DESC (default: ASC) (optional)
     * @param string $orderBy The field by which results will be ordered. Allowed values: id, name (default: name) (optional)
     * @param string $term    Free search term (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCustomersGetAsyncWithHttpInfo($visible = null, $order = null, $orderBy = null, $term = null)
    {
        $returnType = '\Fiteco\KimaiClient\Model\CustomerCollection[]';
        $request = $this->apiCustomersGetRequest($visible, $order, $orderBy, $term);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ('\SplFileObject' === $returnType) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiCustomersGet'.
     *
     * @param string $visible Visibility status to filter activities (1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;both) (optional)
     * @param string $order   The result order. Allowed values: ASC, DESC (default: ASC) (optional)
     * @param string $orderBy The field by which results will be ordered. Allowed values: id, name (default: name) (optional)
     * @param string $term    Free search term (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiCustomersGetRequest($visible = null, $order = null, $orderBy = null, $term = null)
    {
        if (null !== $visible && !preg_match('/\\d+/', $visible)) {
            throw new \InvalidArgumentException('invalid value for "visible" when calling CustomerApi.apiCustomersGet, must conform to the pattern /\\d+/.');
        }

        if (null !== $order && !preg_match('/ASC|DESC/', $order)) {
            throw new \InvalidArgumentException('invalid value for "order" when calling CustomerApi.apiCustomersGet, must conform to the pattern /ASC|DESC/.');
        }

        if (null !== $orderBy && !preg_match('/id|name/', $orderBy)) {
            throw new \InvalidArgumentException('invalid value for "orderBy" when calling CustomerApi.apiCustomersGet, must conform to the pattern /id|name/.');
        }

        $resourcePath = '/api/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (\is_array($visible)) {
            $visible = ObjectSerializer::serializeCollection($visible, '', true);
        }
        if (null !== $visible) {
            $queryParams['visible'] = $visible;
        }
        // query params
        if (\is_array($order)) {
            $order = ObjectSerializer::serializeCollection($order, '', true);
        }
        if (null !== $order) {
            $queryParams['order'] = $order;
        }
        // query params
        if (\is_array($orderBy)) {
            $orderBy = ObjectSerializer::serializeCollection($orderBy, '', true);
        }
        if (null !== $orderBy) {
            $queryParams['orderBy'] = $orderBy;
        }
        // query params
        if (\is_array($term)) {
            $term = ObjectSerializer::serializeCollection($term, '', true);
        }
        if (null !== $term) {
            $queryParams['term'] = $term;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiCustomersIdGet.
     *
     * Returns one customer
     *
     * @param string $id id (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\CustomerEntity
     */
    public function apiCustomersIdGet($id)
    {
        [$response] = $this->apiCustomersIdGetWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation apiCustomersIdGetWithHttpInfo.
     *
     * Returns one customer
     *
     * @param string $id (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\CustomerEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiCustomersIdGetWithHttpInfo($id)
    {
        $request = $this->apiCustomersIdGetRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\CustomerEntity' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\CustomerEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\CustomerEntity';
            $responseBody = $response->getBody();
            if ('\SplFileObject' === $returnType) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\CustomerEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiCustomersIdGetAsync.
     *
     * Returns one customer
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCustomersIdGetAsync($id)
    {
        return $this->apiCustomersIdGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiCustomersIdGetAsyncWithHttpInfo.
     *
     * Returns one customer
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCustomersIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\Fiteco\KimaiClient\Model\CustomerEntity';
        $request = $this->apiCustomersIdGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ('\SplFileObject' === $returnType) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiCustomersIdGet'.
     *
     * @param string $id (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiCustomersIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiCustomersIdGet');
        }

        $resourcePath = '/api/customers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiCustomersIdMetaPatch.
     *
     * Sets the value of a meta-field for an existing customer
     *
     * @param int                                     $id   Customer record ID to set the meta-field value for (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject1 $body body (optional)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\CustomerEntity
     */
    public function apiCustomersIdMetaPatch($id, $body = null)
    {
        [$response] = $this->apiCustomersIdMetaPatchWithHttpInfo($id, $body);

        return $response;
    }

    /**
     * Operation apiCustomersIdMetaPatchWithHttpInfo.
     *
     * Sets the value of a meta-field for an existing customer
     *
     * @param int                                     $id   Customer record ID to set the meta-field value for (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject1 $body (optional)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\CustomerEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiCustomersIdMetaPatchWithHttpInfo($id, $body = null)
    {
        $request = $this->apiCustomersIdMetaPatchRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\CustomerEntity' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\CustomerEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\CustomerEntity';
            $responseBody = $response->getBody();
            if ('\SplFileObject' === $returnType) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\CustomerEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiCustomersIdMetaPatchAsync.
     *
     * Sets the value of a meta-field for an existing customer
     *
     * @param int                                     $id   Customer record ID to set the meta-field value for (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject1 $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCustomersIdMetaPatchAsync($id, $body = null)
    {
        return $this->apiCustomersIdMetaPatchAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiCustomersIdMetaPatchAsyncWithHttpInfo.
     *
     * Sets the value of a meta-field for an existing customer
     *
     * @param int                                     $id   Customer record ID to set the meta-field value for (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject1 $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCustomersIdMetaPatchAsyncWithHttpInfo($id, $body = null)
    {
        $returnType = '\Fiteco\KimaiClient\Model\CustomerEntity';
        $request = $this->apiCustomersIdMetaPatchRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ('\SplFileObject' === $returnType) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiCustomersIdMetaPatch'.
     *
     * @param int                                     $id   Customer record ID to set the meta-field value for (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject1 $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiCustomersIdMetaPatchRequest($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiCustomersIdMetaPatch');
        }

        $resourcePath = '/api/customers/{id}/meta';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'PATCH',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiCustomersIdPatch.
     *
     * Update an existing customer
     *
     * @param int                                        $id   Customer ID to update (required)
     * @param \Fiteco\KimaiClient\Model\CustomerEditForm $body body (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\CustomerEntity
     */
    public function apiCustomersIdPatch($id, $body)
    {
        [$response] = $this->apiCustomersIdPatchWithHttpInfo($id, $body);

        return $response;
    }

    /**
     * Operation apiCustomersIdPatchWithHttpInfo.
     *
     * Update an existing customer
     *
     * @param int                                        $id   Customer ID to update (required)
     * @param \Fiteco\KimaiClient\Model\CustomerEditForm $body (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\CustomerEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiCustomersIdPatchWithHttpInfo($id, $body)
    {
        $request = $this->apiCustomersIdPatchRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\CustomerEntity' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\CustomerEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\CustomerEntity';
            $responseBody = $response->getBody();
            if ('\SplFileObject' === $returnType) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\CustomerEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiCustomersIdPatchAsync.
     *
     * Update an existing customer
     *
     * @param int                                        $id   Customer ID to update (required)
     * @param \Fiteco\KimaiClient\Model\CustomerEditForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCustomersIdPatchAsync($id, $body)
    {
        return $this->apiCustomersIdPatchAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiCustomersIdPatchAsyncWithHttpInfo.
     *
     * Update an existing customer
     *
     * @param int                                        $id   Customer ID to update (required)
     * @param \Fiteco\KimaiClient\Model\CustomerEditForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCustomersIdPatchAsyncWithHttpInfo($id, $body)
    {
        $returnType = '\Fiteco\KimaiClient\Model\CustomerEntity';
        $request = $this->apiCustomersIdPatchRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ('\SplFileObject' === $returnType) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiCustomersIdPatch'.
     *
     * @param int                                        $id   Customer ID to update (required)
     * @param \Fiteco\KimaiClient\Model\CustomerEditForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiCustomersIdPatchRequest($id, $body)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiCustomersIdPatch');
        }
        // verify the required parameter 'body' is set
        if (null === $body || (\is_array($body) && 0 === \count($body))) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling apiCustomersIdPatch');
        }

        $resourcePath = '/api/customers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'PATCH',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiCustomersIdRatesGet.
     *
     * Returns a collection of all rates for one customer
     *
     * @param int $id The customer whose rates will be returned (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\CustomerRate[]
     */
    public function apiCustomersIdRatesGet($id)
    {
        [$response] = $this->apiCustomersIdRatesGetWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation apiCustomersIdRatesGetWithHttpInfo.
     *
     * Returns a collection of all rates for one customer
     *
     * @param int $id The customer whose rates will be returned (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\CustomerRate[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiCustomersIdRatesGetWithHttpInfo($id)
    {
        $request = $this->apiCustomersIdRatesGetRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\CustomerRate[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\CustomerRate[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\CustomerRate[]';
            $responseBody = $response->getBody();
            if ('\SplFileObject' === $returnType) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\CustomerRate[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiCustomersIdRatesGetAsync.
     *
     * Returns a collection of all rates for one customer
     *
     * @param int $id The customer whose rates will be returned (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCustomersIdRatesGetAsync($id)
    {
        return $this->apiCustomersIdRatesGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiCustomersIdRatesGetAsyncWithHttpInfo.
     *
     * Returns a collection of all rates for one customer
     *
     * @param int $id The customer whose rates will be returned (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCustomersIdRatesGetAsyncWithHttpInfo($id)
    {
        $returnType = '\Fiteco\KimaiClient\Model\CustomerRate[]';
        $request = $this->apiCustomersIdRatesGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ('\SplFileObject' === $returnType) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiCustomersIdRatesGet'.
     *
     * @param int $id The customer whose rates will be returned (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiCustomersIdRatesGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiCustomersIdRatesGet');
        }

        $resourcePath = '/api/customers/{id}/rates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiCustomersIdRatesPost.
     *
     * Adds a new rate to a customer
     *
     * @param int                                        $id   The customer to add the rate for (required)
     * @param \Fiteco\KimaiClient\Model\CustomerRateForm $body body (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\CustomerRate
     */
    public function apiCustomersIdRatesPost($id, $body)
    {
        [$response] = $this->apiCustomersIdRatesPostWithHttpInfo($id, $body);

        return $response;
    }

    /**
     * Operation apiCustomersIdRatesPostWithHttpInfo.
     *
     * Adds a new rate to a customer
     *
     * @param int                                        $id   The customer to add the rate for (required)
     * @param \Fiteco\KimaiClient\Model\CustomerRateForm $body (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\CustomerRate, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiCustomersIdRatesPostWithHttpInfo($id, $body)
    {
        $request = $this->apiCustomersIdRatesPostRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\CustomerRate' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\CustomerRate', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\CustomerRate';
            $responseBody = $response->getBody();
            if ('\SplFileObject' === $returnType) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\CustomerRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiCustomersIdRatesPostAsync.
     *
     * Adds a new rate to a customer
     *
     * @param int                                        $id   The customer to add the rate for (required)
     * @param \Fiteco\KimaiClient\Model\CustomerRateForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCustomersIdRatesPostAsync($id, $body)
    {
        return $this->apiCustomersIdRatesPostAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiCustomersIdRatesPostAsyncWithHttpInfo.
     *
     * Adds a new rate to a customer
     *
     * @param int                                        $id   The customer to add the rate for (required)
     * @param \Fiteco\KimaiClient\Model\CustomerRateForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCustomersIdRatesPostAsyncWithHttpInfo($id, $body)
    {
        $returnType = '\Fiteco\KimaiClient\Model\CustomerRate';
        $request = $this->apiCustomersIdRatesPostRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ('\SplFileObject' === $returnType) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiCustomersIdRatesPost'.
     *
     * @param int                                        $id   The customer to add the rate for (required)
     * @param \Fiteco\KimaiClient\Model\CustomerRateForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiCustomersIdRatesPostRequest($id, $body)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiCustomersIdRatesPost');
        }
        // verify the required parameter 'body' is set
        if (null === $body || (\is_array($body) && 0 === \count($body))) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling apiCustomersIdRatesPost');
        }

        $resourcePath = '/api/customers/{id}/rates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiCustomersIdRatesRateIdDelete.
     *
     * Deletes one rate for an customer
     *
     * @param int $id     The customer whose rate will be removed (required)
     * @param int $rateId The rate to remove (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return void
     */
    public function apiCustomersIdRatesRateIdDelete($id, $rateId)
    {
        $this->apiCustomersIdRatesRateIdDeleteWithHttpInfo($id, $rateId);
    }

    /**
     * Operation apiCustomersIdRatesRateIdDeleteWithHttpInfo.
     *
     * Deletes one rate for an customer
     *
     * @param int $id     The customer whose rate will be removed (required)
     * @param int $rateId The rate to remove (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiCustomersIdRatesRateIdDeleteWithHttpInfo($id, $rateId)
    {
        $request = $this->apiCustomersIdRatesRateIdDeleteRequest($id, $rateId);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation apiCustomersIdRatesRateIdDeleteAsync.
     *
     * Deletes one rate for an customer
     *
     * @param int $id     The customer whose rate will be removed (required)
     * @param int $rateId The rate to remove (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCustomersIdRatesRateIdDeleteAsync($id, $rateId)
    {
        return $this->apiCustomersIdRatesRateIdDeleteAsyncWithHttpInfo($id, $rateId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiCustomersIdRatesRateIdDeleteAsyncWithHttpInfo.
     *
     * Deletes one rate for an customer
     *
     * @param int $id     The customer whose rate will be removed (required)
     * @param int $rateId The rate to remove (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCustomersIdRatesRateIdDeleteAsyncWithHttpInfo($id, $rateId)
    {
        $returnType = '';
        $request = $this->apiCustomersIdRatesRateIdDeleteRequest($id, $rateId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiCustomersIdRatesRateIdDelete'.
     *
     * @param int $id     The customer whose rate will be removed (required)
     * @param int $rateId The rate to remove (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiCustomersIdRatesRateIdDeleteRequest($id, $rateId)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiCustomersIdRatesRateIdDelete');
        }
        // verify the required parameter 'rateId' is set
        if (null === $rateId || (\is_array($rateId) && 0 === \count($rateId))) {
            throw new \InvalidArgumentException('Missing the required parameter $rateId when calling apiCustomersIdRatesRateIdDelete');
        }

        $resourcePath = '/api/customers/{id}/rates/{rateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if (null !== $rateId) {
            $resourcePath = str_replace(
                '{'.'rateId'.'}',
                ObjectSerializer::toPathValue($rateId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'DELETE',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiCustomersPost.
     *
     * Creates a new customer
     *
     * @param \Fiteco\KimaiClient\Model\CustomerEditForm $body body (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\CustomerEntity
     */
    public function apiCustomersPost($body)
    {
        [$response] = $this->apiCustomersPostWithHttpInfo($body);

        return $response;
    }

    /**
     * Operation apiCustomersPostWithHttpInfo.
     *
     * Creates a new customer
     *
     * @param \Fiteco\KimaiClient\Model\CustomerEditForm $body (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\CustomerEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiCustomersPostWithHttpInfo($body)
    {
        $request = $this->apiCustomersPostRequest($body);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\CustomerEntity' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\CustomerEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\CustomerEntity';
            $responseBody = $response->getBody();
            if ('\SplFileObject' === $returnType) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\CustomerEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiCustomersPostAsync.
     *
     * Creates a new customer
     *
     * @param \Fiteco\KimaiClient\Model\CustomerEditForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCustomersPostAsync($body)
    {
        return $this->apiCustomersPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiCustomersPostAsyncWithHttpInfo.
     *
     * Creates a new customer
     *
     * @param \Fiteco\KimaiClient\Model\CustomerEditForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiCustomersPostAsyncWithHttpInfo($body)
    {
        $returnType = '\Fiteco\KimaiClient\Model\CustomerEntity';
        $request = $this->apiCustomersPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ('\SplFileObject' === $returnType) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiCustomersPost'.
     *
     * @param \Fiteco\KimaiClient\Model\CustomerEditForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiCustomersPostRequest($body)
    {
        // verify the required parameter 'body' is set
        if (null === $body || (\is_array($body) && 0 === \count($body))) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling apiCustomersPost');
        }

        $resourcePath = '/api/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option.
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }
}
