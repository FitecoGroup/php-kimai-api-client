<?php

/**
 *
 * Kimai API Client 2020 — NOTICE OF LICENSE
 * This source file is released under MIT license by copyright holders.
 * @copyright 2017-2020 (c) Niko Granö (https://granö.fi)
 * @copyright 2014-2020 (c) Fiteco Group Oy (https://group.fiteco.fi)
 *
 */

/**
 * Kimai - API Docs.
 *
 * JSON API for the Kimai time-tracking software: [API documentation](https://www.kimai.org/documentation/rest-api.html), [Swagger definition file](doc.json)
 *
 * The version of the OpenAPI document: 0.6
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiteco\KimaiClient\Api;

use Fiteco\KimaiClient\ApiException;
use Fiteco\KimaiClient\Configuration;
use Fiteco\KimaiClient\HeaderSelector;
use Fiteco\KimaiClient\ObjectSerializer;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;

/**
 * TimesheetApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class TimesheetApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index.
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index.
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiTimesheetsActiveGet.
     *
     * Returns the collection of active timesheet records
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\TimesheetCollectionExpanded[]
     */
    public function apiTimesheetsActiveGet()
    {
        [$response] = $this->apiTimesheetsActiveGetWithHttpInfo();

        return $response;
    }

    /**
     * Operation apiTimesheetsActiveGetWithHttpInfo.
     *
     * Returns the collection of active timesheet records
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\TimesheetCollectionExpanded[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsActiveGetWithHttpInfo()
    {
        $request = $this->apiTimesheetsActiveGetRequest();

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\TimesheetCollectionExpanded[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\TimesheetCollectionExpanded[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\TimesheetCollectionExpanded[]';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\TimesheetCollectionExpanded[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsActiveGetAsync.
     *
     * Returns the collection of active timesheet records
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsActiveGetAsync()
    {
        return $this->apiTimesheetsActiveGetAsyncWithHttpInfo()
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsActiveGetAsyncWithHttpInfo.
     *
     * Returns the collection of active timesheet records
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsActiveGetAsyncWithHttpInfo()
    {
        $returnType = '\Fiteco\KimaiClient\Model\TimesheetCollectionExpanded[]';
        $request = $this->apiTimesheetsActiveGetRequest();

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsActiveGet'.
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTimesheetsActiveGetRequest()
    {
        $resourcePath = '/api/timesheets/active';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsGet.
     *
     * Returns a collection of timesheet records
     *
     * @param string    $user          User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param string    $customer      DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0) (optional)
     * @param string    $customers     Comma separated list of customer IDs to filter timesheets (optional)
     * @param string    $project       DEPRECATED: Project ID to filter timesheets (will be removed with 2.0) (optional)
     * @param string    $projects      Comma separated list of project IDs to filter timesheets (optional)
     * @param string    $activity      DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0) (optional)
     * @param string    $activities    Comma separated list of activity IDs to filter timesheets (optional)
     * @param string    $page          The page to display, renders a 404 if not found (default: 1) (optional)
     * @param string    $size          The amount of entries for each page (default: 50) (optional)
     * @param string    $tags          Comma separated list of tag names (optional)
     * @param string    $orderBy       The field by which results will be ordered. Allowed values: id, begin, end, rate (default: begin) (optional)
     * @param string    $order         The result order. Allowed values: ASC, DESC (default: DESC) (optional)
     * @param \DateTime $begin         Only records after this date will be included (format: HTML5) (optional)
     * @param \DateTime $end           Only records before this date will be included (format: HTML5) (optional)
     * @param string    $exported      Use this flag if you want to filter for export state. Allowed values: 0&#x3D;not exported, 1&#x3D;exported (default: all) (optional)
     * @param string    $active        Filter for running/active records. Allowed values: 0&#x3D;stopped, 1&#x3D;active (default: all) (optional)
     * @param string    $full          Allows to fetch fully serialized objects including subresources. Allowed values: true (default: false) (optional)
     * @param string    $term          Free search term (optional)
     * @param \DateTime $modifiedAfter Only records changed after this date will be included (format: HTML5). Available since Kimai 1.10 and works only for records that were created/updated since then. (optional)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\TimesheetCollection[]
     */
    public function apiTimesheetsGet($user = null, $customer = null, $customers = null, $project = null, $projects = null, $activity = null, $activities = null, $page = null, $size = null, $tags = null, $orderBy = null, $order = null, $begin = null, $end = null, $exported = null, $active = null, $full = null, $term = null, $modifiedAfter = null)
    {
        [$response] = $this->apiTimesheetsGetWithHttpInfo($user, $customer, $customers, $project, $projects, $activity, $activities, $page, $size, $tags, $orderBy, $order, $begin, $end, $exported, $active, $full, $term, $modifiedAfter);

        return $response;
    }

    /**
     * Operation apiTimesheetsGetWithHttpInfo.
     *
     * Returns a collection of timesheet records
     *
     * @param string    $user          User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param string    $customer      DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0) (optional)
     * @param string    $customers     Comma separated list of customer IDs to filter timesheets (optional)
     * @param string    $project       DEPRECATED: Project ID to filter timesheets (will be removed with 2.0) (optional)
     * @param string    $projects      Comma separated list of project IDs to filter timesheets (optional)
     * @param string    $activity      DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0) (optional)
     * @param string    $activities    Comma separated list of activity IDs to filter timesheets (optional)
     * @param string    $page          The page to display, renders a 404 if not found (default: 1) (optional)
     * @param string    $size          The amount of entries for each page (default: 50) (optional)
     * @param string    $tags          Comma separated list of tag names (optional)
     * @param string    $orderBy       The field by which results will be ordered. Allowed values: id, begin, end, rate (default: begin) (optional)
     * @param string    $order         The result order. Allowed values: ASC, DESC (default: DESC) (optional)
     * @param \DateTime $begin         Only records after this date will be included (format: HTML5) (optional)
     * @param \DateTime $end           Only records before this date will be included (format: HTML5) (optional)
     * @param string    $exported      Use this flag if you want to filter for export state. Allowed values: 0&#x3D;not exported, 1&#x3D;exported (default: all) (optional)
     * @param string    $active        Filter for running/active records. Allowed values: 0&#x3D;stopped, 1&#x3D;active (default: all) (optional)
     * @param string    $full          Allows to fetch fully serialized objects including subresources. Allowed values: true (default: false) (optional)
     * @param string    $term          Free search term (optional)
     * @param \DateTime $modifiedAfter Only records changed after this date will be included (format: HTML5). Available since Kimai 1.10 and works only for records that were created/updated since then. (optional)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\TimesheetCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsGetWithHttpInfo($user = null, $customer = null, $customers = null, $project = null, $projects = null, $activity = null, $activities = null, $page = null, $size = null, $tags = null, $orderBy = null, $order = null, $begin = null, $end = null, $exported = null, $active = null, $full = null, $term = null, $modifiedAfter = null)
    {
        $request = $this->apiTimesheetsGetRequest($user, $customer, $customers, $project, $projects, $activity, $activities, $page, $size, $tags, $orderBy, $order, $begin, $end, $exported, $active, $full, $term, $modifiedAfter);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\TimesheetCollection[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\TimesheetCollection[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\TimesheetCollection[]';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\TimesheetCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsGetAsync.
     *
     * Returns a collection of timesheet records
     *
     * @param string    $user          User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param string    $customer      DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0) (optional)
     * @param string    $customers     Comma separated list of customer IDs to filter timesheets (optional)
     * @param string    $project       DEPRECATED: Project ID to filter timesheets (will be removed with 2.0) (optional)
     * @param string    $projects      Comma separated list of project IDs to filter timesheets (optional)
     * @param string    $activity      DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0) (optional)
     * @param string    $activities    Comma separated list of activity IDs to filter timesheets (optional)
     * @param string    $page          The page to display, renders a 404 if not found (default: 1) (optional)
     * @param string    $size          The amount of entries for each page (default: 50) (optional)
     * @param string    $tags          Comma separated list of tag names (optional)
     * @param string    $orderBy       The field by which results will be ordered. Allowed values: id, begin, end, rate (default: begin) (optional)
     * @param string    $order         The result order. Allowed values: ASC, DESC (default: DESC) (optional)
     * @param \DateTime $begin         Only records after this date will be included (format: HTML5) (optional)
     * @param \DateTime $end           Only records before this date will be included (format: HTML5) (optional)
     * @param string    $exported      Use this flag if you want to filter for export state. Allowed values: 0&#x3D;not exported, 1&#x3D;exported (default: all) (optional)
     * @param string    $active        Filter for running/active records. Allowed values: 0&#x3D;stopped, 1&#x3D;active (default: all) (optional)
     * @param string    $full          Allows to fetch fully serialized objects including subresources. Allowed values: true (default: false) (optional)
     * @param string    $term          Free search term (optional)
     * @param \DateTime $modifiedAfter Only records changed after this date will be included (format: HTML5). Available since Kimai 1.10 and works only for records that were created/updated since then. (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsGetAsync($user = null, $customer = null, $customers = null, $project = null, $projects = null, $activity = null, $activities = null, $page = null, $size = null, $tags = null, $orderBy = null, $order = null, $begin = null, $end = null, $exported = null, $active = null, $full = null, $term = null, $modifiedAfter = null)
    {
        return $this->apiTimesheetsGetAsyncWithHttpInfo($user, $customer, $customers, $project, $projects, $activity, $activities, $page, $size, $tags, $orderBy, $order, $begin, $end, $exported, $active, $full, $term, $modifiedAfter)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsGetAsyncWithHttpInfo.
     *
     * Returns a collection of timesheet records
     *
     * @param string    $user          User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param string    $customer      DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0) (optional)
     * @param string    $customers     Comma separated list of customer IDs to filter timesheets (optional)
     * @param string    $project       DEPRECATED: Project ID to filter timesheets (will be removed with 2.0) (optional)
     * @param string    $projects      Comma separated list of project IDs to filter timesheets (optional)
     * @param string    $activity      DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0) (optional)
     * @param string    $activities    Comma separated list of activity IDs to filter timesheets (optional)
     * @param string    $page          The page to display, renders a 404 if not found (default: 1) (optional)
     * @param string    $size          The amount of entries for each page (default: 50) (optional)
     * @param string    $tags          Comma separated list of tag names (optional)
     * @param string    $orderBy       The field by which results will be ordered. Allowed values: id, begin, end, rate (default: begin) (optional)
     * @param string    $order         The result order. Allowed values: ASC, DESC (default: DESC) (optional)
     * @param \DateTime $begin         Only records after this date will be included (format: HTML5) (optional)
     * @param \DateTime $end           Only records before this date will be included (format: HTML5) (optional)
     * @param string    $exported      Use this flag if you want to filter for export state. Allowed values: 0&#x3D;not exported, 1&#x3D;exported (default: all) (optional)
     * @param string    $active        Filter for running/active records. Allowed values: 0&#x3D;stopped, 1&#x3D;active (default: all) (optional)
     * @param string    $full          Allows to fetch fully serialized objects including subresources. Allowed values: true (default: false) (optional)
     * @param string    $term          Free search term (optional)
     * @param \DateTime $modifiedAfter Only records changed after this date will be included (format: HTML5). Available since Kimai 1.10 and works only for records that were created/updated since then. (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsGetAsyncWithHttpInfo($user = null, $customer = null, $customers = null, $project = null, $projects = null, $activity = null, $activities = null, $page = null, $size = null, $tags = null, $orderBy = null, $order = null, $begin = null, $end = null, $exported = null, $active = null, $full = null, $term = null, $modifiedAfter = null)
    {
        $returnType = '\Fiteco\KimaiClient\Model\TimesheetCollection[]';
        $request = $this->apiTimesheetsGetRequest($user, $customer, $customers, $project, $projects, $activity, $activities, $page, $size, $tags, $orderBy, $order, $begin, $end, $exported, $active, $full, $term, $modifiedAfter);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsGet'.
     *
     * @param string    $user          User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param string    $customer      DEPRECATED: Customer ID to filter timesheets (will be removed with 2.0) (optional)
     * @param string    $customers     Comma separated list of customer IDs to filter timesheets (optional)
     * @param string    $project       DEPRECATED: Project ID to filter timesheets (will be removed with 2.0) (optional)
     * @param string    $projects      Comma separated list of project IDs to filter timesheets (optional)
     * @param string    $activity      DEPRECATED: Activity ID to filter timesheets (will be removed with 2.0) (optional)
     * @param string    $activities    Comma separated list of activity IDs to filter timesheets (optional)
     * @param string    $page          The page to display, renders a 404 if not found (default: 1) (optional)
     * @param string    $size          The amount of entries for each page (default: 50) (optional)
     * @param string    $tags          Comma separated list of tag names (optional)
     * @param string    $orderBy       The field by which results will be ordered. Allowed values: id, begin, end, rate (default: begin) (optional)
     * @param string    $order         The result order. Allowed values: ASC, DESC (default: DESC) (optional)
     * @param \DateTime $begin         Only records after this date will be included (format: HTML5) (optional)
     * @param \DateTime $end           Only records before this date will be included (format: HTML5) (optional)
     * @param string    $exported      Use this flag if you want to filter for export state. Allowed values: 0&#x3D;not exported, 1&#x3D;exported (default: all) (optional)
     * @param string    $active        Filter for running/active records. Allowed values: 0&#x3D;stopped, 1&#x3D;active (default: all) (optional)
     * @param string    $full          Allows to fetch fully serialized objects including subresources. Allowed values: true (default: false) (optional)
     * @param string    $term          Free search term (optional)
     * @param \DateTime $modifiedAfter Only records changed after this date will be included (format: HTML5). Available since Kimai 1.10 and works only for records that were created/updated since then. (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTimesheetsGetRequest($user = null, $customer = null, $customers = null, $project = null, $projects = null, $activity = null, $activities = null, $page = null, $size = null, $tags = null, $orderBy = null, $order = null, $begin = null, $end = null, $exported = null, $active = null, $full = null, $term = null, $modifiedAfter = null)
    {
        if (null !== $user && !preg_match('/\\d+|all/', $user)) {
            throw new \InvalidArgumentException('invalid value for "user" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /\\d+|all/.');
        }

        if (null !== $customer && !preg_match('/\\d+/', $customer)) {
            throw new \InvalidArgumentException('invalid value for "customer" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /\\d+/.');
        }

        if (null !== $customers && !preg_match('/[\\d|,]+/', $customers)) {
            throw new \InvalidArgumentException('invalid value for "customers" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /[\\d|,]+/.');
        }

        if (null !== $project && !preg_match('/\\d+/', $project)) {
            throw new \InvalidArgumentException('invalid value for "project" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /\\d+/.');
        }

        if (null !== $projects && !preg_match('/[\\d|,]+/', $projects)) {
            throw new \InvalidArgumentException('invalid value for "projects" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /[\\d|,]+/.');
        }

        if (null !== $activity && !preg_match('/\\d+/', $activity)) {
            throw new \InvalidArgumentException('invalid value for "activity" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /\\d+/.');
        }

        if (null !== $activities && !preg_match('/[\\d|,]+/', $activities)) {
            throw new \InvalidArgumentException('invalid value for "activities" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /[\\d|,]+/.');
        }

        if (null !== $page && !preg_match('/\\d+/', $page)) {
            throw new \InvalidArgumentException('invalid value for "page" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /\\d+/.');
        }

        if (null !== $size && !preg_match('/\\d+/', $size)) {
            throw new \InvalidArgumentException('invalid value for "size" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /\\d+/.');
        }

        if (null !== $orderBy && !preg_match('/id|begin|end|rate/', $orderBy)) {
            throw new \InvalidArgumentException('invalid value for "orderBy" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /id|begin|end|rate/.');
        }

        if (null !== $order && !preg_match('/ASC|DESC/', $order)) {
            throw new \InvalidArgumentException('invalid value for "order" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /ASC|DESC/.');
        }

        if (null !== $exported && !preg_match('/0|1/', $exported)) {
            throw new \InvalidArgumentException('invalid value for "exported" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /0|1/.');
        }

        if (null !== $active && !preg_match('/0|1/', $active)) {
            throw new \InvalidArgumentException('invalid value for "active" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /0|1/.');
        }

        if (null !== $full && !preg_match('/true/', $full)) {
            throw new \InvalidArgumentException('invalid value for "full" when calling TimesheetApi.apiTimesheetsGet, must conform to the pattern /true/.');
        }

        $resourcePath = '/api/timesheets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (\is_array($user)) {
            $user = ObjectSerializer::serializeCollection($user, '', true);
        }
        if (null !== $user) {
            $queryParams['user'] = $user;
        }
        // query params
        if (\is_array($customer)) {
            $customer = ObjectSerializer::serializeCollection($customer, '', true);
        }
        if (null !== $customer) {
            $queryParams['customer'] = $customer;
        }
        // query params
        if (\is_array($customers)) {
            $customers = ObjectSerializer::serializeCollection($customers, '', true);
        }
        if (null !== $customers) {
            $queryParams['customers'] = $customers;
        }
        // query params
        if (\is_array($project)) {
            $project = ObjectSerializer::serializeCollection($project, '', true);
        }
        if (null !== $project) {
            $queryParams['project'] = $project;
        }
        // query params
        if (\is_array($projects)) {
            $projects = ObjectSerializer::serializeCollection($projects, '', true);
        }
        if (null !== $projects) {
            $queryParams['projects'] = $projects;
        }
        // query params
        if (\is_array($activity)) {
            $activity = ObjectSerializer::serializeCollection($activity, '', true);
        }
        if (null !== $activity) {
            $queryParams['activity'] = $activity;
        }
        // query params
        if (\is_array($activities)) {
            $activities = ObjectSerializer::serializeCollection($activities, '', true);
        }
        if (null !== $activities) {
            $queryParams['activities'] = $activities;
        }
        // query params
        if (\is_array($page)) {
            $page = ObjectSerializer::serializeCollection($page, '', true);
        }
        if (null !== $page) {
            $queryParams['page'] = $page;
        }
        // query params
        if (\is_array($size)) {
            $size = ObjectSerializer::serializeCollection($size, '', true);
        }
        if (null !== $size) {
            $queryParams['size'] = $size;
        }
        // query params
        if (\is_array($tags)) {
            $tags = ObjectSerializer::serializeCollection($tags, '', true);
        }
        if (null !== $tags) {
            $queryParams['tags'] = $tags;
        }
        // query params
        if (\is_array($orderBy)) {
            $orderBy = ObjectSerializer::serializeCollection($orderBy, '', true);
        }
        if (null !== $orderBy) {
            $queryParams['orderBy'] = $orderBy;
        }
        // query params
        if (\is_array($order)) {
            $order = ObjectSerializer::serializeCollection($order, '', true);
        }
        if (null !== $order) {
            $queryParams['order'] = $order;
        }
        // query params
        if (\is_array($begin)) {
            $begin = ObjectSerializer::serializeCollection($begin, '', true);
        }
        if (null !== $begin) {
            $queryParams['begin'] = $begin;
        }
        // query params
        if (\is_array($end)) {
            $end = ObjectSerializer::serializeCollection($end, '', true);
        }
        if (null !== $end) {
            $queryParams['end'] = $end;
        }
        // query params
        if (\is_array($exported)) {
            $exported = ObjectSerializer::serializeCollection($exported, '', true);
        }
        if (null !== $exported) {
            $queryParams['exported'] = $exported;
        }
        // query params
        if (\is_array($active)) {
            $active = ObjectSerializer::serializeCollection($active, '', true);
        }
        if (null !== $active) {
            $queryParams['active'] = $active;
        }
        // query params
        if (\is_array($full)) {
            $full = ObjectSerializer::serializeCollection($full, '', true);
        }
        if (null !== $full) {
            $queryParams['full'] = $full;
        }
        // query params
        if (\is_array($term)) {
            $term = ObjectSerializer::serializeCollection($term, '', true);
        }
        if (null !== $term) {
            $queryParams['term'] = $term;
        }
        // query params
        if (\is_array($modifiedAfter)) {
            $modifiedAfter = ObjectSerializer::serializeCollection($modifiedAfter, '', true);
        }
        if (null !== $modifiedAfter) {
            $queryParams['modified_after'] = $modifiedAfter;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsIdDelete.
     *
     * Delete an existing timesheet record
     *
     * @param int $id Timesheet record ID to delete (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return void
     */
    public function apiTimesheetsIdDelete($id)
    {
        $this->apiTimesheetsIdDeleteWithHttpInfo($id);
    }

    /**
     * Operation apiTimesheetsIdDeleteWithHttpInfo.
     *
     * Delete an existing timesheet record
     *
     * @param int $id Timesheet record ID to delete (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsIdDeleteWithHttpInfo($id)
    {
        $request = $this->apiTimesheetsIdDeleteRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsIdDeleteAsync.
     *
     * Delete an existing timesheet record
     *
     * @param int $id Timesheet record ID to delete (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdDeleteAsync($id)
    {
        return $this->apiTimesheetsIdDeleteAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsIdDeleteAsyncWithHttpInfo.
     *
     * Delete an existing timesheet record
     *
     * @param int $id Timesheet record ID to delete (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdDeleteAsyncWithHttpInfo($id)
    {
        $returnType = '';
        $request = $this->apiTimesheetsIdDeleteRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsIdDelete'.
     *
     * @param int $id Timesheet record ID to delete (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTimesheetsIdDeleteRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiTimesheetsIdDelete');
        }

        $resourcePath = '/api/timesheets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'DELETE',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsIdDuplicatePatch.
     *
     * Duplicates an existing timesheet record
     *
     * @param int $id Timesheet record ID to duplicate (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\TimesheetEntity
     */
    public function apiTimesheetsIdDuplicatePatch($id)
    {
        [$response] = $this->apiTimesheetsIdDuplicatePatchWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation apiTimesheetsIdDuplicatePatchWithHttpInfo.
     *
     * Duplicates an existing timesheet record
     *
     * @param int $id Timesheet record ID to duplicate (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\TimesheetEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsIdDuplicatePatchWithHttpInfo($id)
    {
        $request = $this->apiTimesheetsIdDuplicatePatchRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\TimesheetEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\TimesheetEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\TimesheetEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\TimesheetEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsIdDuplicatePatchAsync.
     *
     * Duplicates an existing timesheet record
     *
     * @param int $id Timesheet record ID to duplicate (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdDuplicatePatchAsync($id)
    {
        return $this->apiTimesheetsIdDuplicatePatchAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsIdDuplicatePatchAsyncWithHttpInfo.
     *
     * Duplicates an existing timesheet record
     *
     * @param int $id Timesheet record ID to duplicate (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdDuplicatePatchAsyncWithHttpInfo($id)
    {
        $returnType = '\Fiteco\KimaiClient\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdDuplicatePatchRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsIdDuplicatePatch'.
     *
     * @param int $id Timesheet record ID to duplicate (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTimesheetsIdDuplicatePatchRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiTimesheetsIdDuplicatePatch');
        }

        $resourcePath = '/api/timesheets/{id}/duplicate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'PATCH',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsIdExportPatch.
     *
     * Switch the export state of a timesheet record to (un-)lock it
     *
     * @param int $id Timesheet record ID to switch export state (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\TimesheetEntity
     */
    public function apiTimesheetsIdExportPatch($id)
    {
        [$response] = $this->apiTimesheetsIdExportPatchWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation apiTimesheetsIdExportPatchWithHttpInfo.
     *
     * Switch the export state of a timesheet record to (un-)lock it
     *
     * @param int $id Timesheet record ID to switch export state (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\TimesheetEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsIdExportPatchWithHttpInfo($id)
    {
        $request = $this->apiTimesheetsIdExportPatchRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\TimesheetEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\TimesheetEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\TimesheetEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\TimesheetEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsIdExportPatchAsync.
     *
     * Switch the export state of a timesheet record to (un-)lock it
     *
     * @param int $id Timesheet record ID to switch export state (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdExportPatchAsync($id)
    {
        return $this->apiTimesheetsIdExportPatchAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsIdExportPatchAsyncWithHttpInfo.
     *
     * Switch the export state of a timesheet record to (un-)lock it
     *
     * @param int $id Timesheet record ID to switch export state (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdExportPatchAsyncWithHttpInfo($id)
    {
        $returnType = '\Fiteco\KimaiClient\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdExportPatchRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsIdExportPatch'.
     *
     * @param int $id Timesheet record ID to switch export state (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTimesheetsIdExportPatchRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiTimesheetsIdExportPatch');
        }

        $resourcePath = '/api/timesheets/{id}/export';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'PATCH',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsIdGet.
     *
     * Returns one timesheet record
     *
     * @param int $id Timesheet record ID to fetch (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\TimesheetEntity
     */
    public function apiTimesheetsIdGet($id)
    {
        [$response] = $this->apiTimesheetsIdGetWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation apiTimesheetsIdGetWithHttpInfo.
     *
     * Returns one timesheet record
     *
     * @param int $id Timesheet record ID to fetch (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\TimesheetEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsIdGetWithHttpInfo($id)
    {
        $request = $this->apiTimesheetsIdGetRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\TimesheetEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\TimesheetEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\TimesheetEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\TimesheetEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsIdGetAsync.
     *
     * Returns one timesheet record
     *
     * @param int $id Timesheet record ID to fetch (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdGetAsync($id)
    {
        return $this->apiTimesheetsIdGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsIdGetAsyncWithHttpInfo.
     *
     * Returns one timesheet record
     *
     * @param int $id Timesheet record ID to fetch (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\Fiteco\KimaiClient\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsIdGet'.
     *
     * @param int $id Timesheet record ID to fetch (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTimesheetsIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiTimesheetsIdGet');
        }

        $resourcePath = '/api/timesheets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsIdMetaPatch.
     *
     * Sets the value of a meta-field for an existing timesheet.
     *
     * @param int                                     $id   Timesheet record ID to set the meta-field value for (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject4 $body body (optional)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\TimesheetEntity
     */
    public function apiTimesheetsIdMetaPatch($id, $body = null)
    {
        [$response] = $this->apiTimesheetsIdMetaPatchWithHttpInfo($id, $body);

        return $response;
    }

    /**
     * Operation apiTimesheetsIdMetaPatchWithHttpInfo.
     *
     * Sets the value of a meta-field for an existing timesheet.
     *
     * @param int                                     $id   Timesheet record ID to set the meta-field value for (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject4 $body (optional)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\TimesheetEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsIdMetaPatchWithHttpInfo($id, $body = null)
    {
        $request = $this->apiTimesheetsIdMetaPatchRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\TimesheetEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\TimesheetEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\TimesheetEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\TimesheetEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsIdMetaPatchAsync.
     *
     * Sets the value of a meta-field for an existing timesheet.
     *
     * @param int                                     $id   Timesheet record ID to set the meta-field value for (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject4 $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdMetaPatchAsync($id, $body = null)
    {
        return $this->apiTimesheetsIdMetaPatchAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsIdMetaPatchAsyncWithHttpInfo.
     *
     * Sets the value of a meta-field for an existing timesheet.
     *
     * @param int                                     $id   Timesheet record ID to set the meta-field value for (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject4 $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdMetaPatchAsyncWithHttpInfo($id, $body = null)
    {
        $returnType = '\Fiteco\KimaiClient\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdMetaPatchRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsIdMetaPatch'.
     *
     * @param int                                     $id   Timesheet record ID to set the meta-field value for (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject4 $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTimesheetsIdMetaPatchRequest($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiTimesheetsIdMetaPatch');
        }

        $resourcePath = '/api/timesheets/{id}/meta';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'PATCH',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsIdPatch.
     *
     * Update an existing timesheet record
     *
     * @param int                                         $id   Timesheet record ID to update (required)
     * @param \Fiteco\KimaiClient\Model\TimesheetEditForm $body body (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\TimesheetEntity
     */
    public function apiTimesheetsIdPatch($id, $body)
    {
        [$response] = $this->apiTimesheetsIdPatchWithHttpInfo($id, $body);

        return $response;
    }

    /**
     * Operation apiTimesheetsIdPatchWithHttpInfo.
     *
     * Update an existing timesheet record
     *
     * @param int                                         $id   Timesheet record ID to update (required)
     * @param \Fiteco\KimaiClient\Model\TimesheetEditForm $body (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\TimesheetEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsIdPatchWithHttpInfo($id, $body)
    {
        $request = $this->apiTimesheetsIdPatchRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\TimesheetEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\TimesheetEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\TimesheetEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\TimesheetEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsIdPatchAsync.
     *
     * Update an existing timesheet record
     *
     * @param int                                         $id   Timesheet record ID to update (required)
     * @param \Fiteco\KimaiClient\Model\TimesheetEditForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdPatchAsync($id, $body)
    {
        return $this->apiTimesheetsIdPatchAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsIdPatchAsyncWithHttpInfo.
     *
     * Update an existing timesheet record
     *
     * @param int                                         $id   Timesheet record ID to update (required)
     * @param \Fiteco\KimaiClient\Model\TimesheetEditForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdPatchAsyncWithHttpInfo($id, $body)
    {
        $returnType = '\Fiteco\KimaiClient\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdPatchRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsIdPatch'.
     *
     * @param int                                         $id   Timesheet record ID to update (required)
     * @param \Fiteco\KimaiClient\Model\TimesheetEditForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTimesheetsIdPatchRequest($id, $body)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiTimesheetsIdPatch');
        }
        // verify the required parameter 'body' is set
        if (null === $body || (\is_array($body) && 0 === \count($body))) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling apiTimesheetsIdPatch');
        }

        $resourcePath = '/api/timesheets/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'PATCH',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsIdRestartPatch.
     *
     * Restarts a previously stopped timesheet record for the current user
     *
     * @param int                                     $id   Timesheet record ID to restart (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject3 $body body (optional)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\TimesheetEntity
     */
    public function apiTimesheetsIdRestartPatch($id, $body = null)
    {
        [$response] = $this->apiTimesheetsIdRestartPatchWithHttpInfo($id, $body);

        return $response;
    }

    /**
     * Operation apiTimesheetsIdRestartPatchWithHttpInfo.
     *
     * Restarts a previously stopped timesheet record for the current user
     *
     * @param int                                     $id   Timesheet record ID to restart (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject3 $body (optional)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\TimesheetEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsIdRestartPatchWithHttpInfo($id, $body = null)
    {
        $request = $this->apiTimesheetsIdRestartPatchRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\TimesheetEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\TimesheetEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\TimesheetEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\TimesheetEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsIdRestartPatchAsync.
     *
     * Restarts a previously stopped timesheet record for the current user
     *
     * @param int                                     $id   Timesheet record ID to restart (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject3 $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdRestartPatchAsync($id, $body = null)
    {
        return $this->apiTimesheetsIdRestartPatchAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsIdRestartPatchAsyncWithHttpInfo.
     *
     * Restarts a previously stopped timesheet record for the current user
     *
     * @param int                                     $id   Timesheet record ID to restart (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject3 $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdRestartPatchAsyncWithHttpInfo($id, $body = null)
    {
        $returnType = '\Fiteco\KimaiClient\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdRestartPatchRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsIdRestartPatch'.
     *
     * @param int                                     $id   Timesheet record ID to restart (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject3 $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTimesheetsIdRestartPatchRequest($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiTimesheetsIdRestartPatch');
        }

        $resourcePath = '/api/timesheets/{id}/restart';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'PATCH',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsIdStopPatch.
     *
     * Stops an active timesheet record
     *
     * @param int $id Timesheet record ID to stop (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\TimesheetEntity
     */
    public function apiTimesheetsIdStopPatch($id)
    {
        [$response] = $this->apiTimesheetsIdStopPatchWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation apiTimesheetsIdStopPatchWithHttpInfo.
     *
     * Stops an active timesheet record
     *
     * @param int $id Timesheet record ID to stop (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\TimesheetEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsIdStopPatchWithHttpInfo($id)
    {
        $request = $this->apiTimesheetsIdStopPatchRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\TimesheetEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\TimesheetEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\TimesheetEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\TimesheetEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsIdStopPatchAsync.
     *
     * Stops an active timesheet record
     *
     * @param int $id Timesheet record ID to stop (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdStopPatchAsync($id)
    {
        return $this->apiTimesheetsIdStopPatchAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsIdStopPatchAsyncWithHttpInfo.
     *
     * Stops an active timesheet record
     *
     * @param int $id Timesheet record ID to stop (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsIdStopPatchAsyncWithHttpInfo($id)
    {
        $returnType = '\Fiteco\KimaiClient\Model\TimesheetEntity';
        $request = $this->apiTimesheetsIdStopPatchRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsIdStopPatch'.
     *
     * @param int $id Timesheet record ID to stop (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTimesheetsIdStopPatchRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiTimesheetsIdStopPatch');
        }

        $resourcePath = '/api/timesheets/{id}/stop';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'PATCH',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsPost.
     *
     * Creates a new timesheet record
     *
     * @param \Fiteco\KimaiClient\Model\TimesheetEditForm $body body (required)
     * @param string                                      $full Allows to fetch fully serialized objects including subresources (TimesheetEntityExpanded). Allowed values: true (default: false) (optional)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\TimesheetEntity
     */
    public function apiTimesheetsPost($body, $full = null)
    {
        [$response] = $this->apiTimesheetsPostWithHttpInfo($body, $full);

        return $response;
    }

    /**
     * Operation apiTimesheetsPostWithHttpInfo.
     *
     * Creates a new timesheet record
     *
     * @param \Fiteco\KimaiClient\Model\TimesheetEditForm $body (required)
     * @param string                                      $full Allows to fetch fully serialized objects including subresources (TimesheetEntityExpanded). Allowed values: true (default: false) (optional)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\TimesheetEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsPostWithHttpInfo($body, $full = null)
    {
        $request = $this->apiTimesheetsPostRequest($body, $full);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\TimesheetEntity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\TimesheetEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\TimesheetEntity';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\TimesheetEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsPostAsync.
     *
     * Creates a new timesheet record
     *
     * @param \Fiteco\KimaiClient\Model\TimesheetEditForm $body (required)
     * @param string                                      $full Allows to fetch fully serialized objects including subresources (TimesheetEntityExpanded). Allowed values: true (default: false) (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsPostAsync($body, $full = null)
    {
        return $this->apiTimesheetsPostAsyncWithHttpInfo($body, $full)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsPostAsyncWithHttpInfo.
     *
     * Creates a new timesheet record
     *
     * @param \Fiteco\KimaiClient\Model\TimesheetEditForm $body (required)
     * @param string                                      $full Allows to fetch fully serialized objects including subresources (TimesheetEntityExpanded). Allowed values: true (default: false) (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsPostAsyncWithHttpInfo($body, $full = null)
    {
        $returnType = '\Fiteco\KimaiClient\Model\TimesheetEntity';
        $request = $this->apiTimesheetsPostRequest($body, $full);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsPost'.
     *
     * @param \Fiteco\KimaiClient\Model\TimesheetEditForm $body (required)
     * @param string                                      $full Allows to fetch fully serialized objects including subresources (TimesheetEntityExpanded). Allowed values: true (default: false) (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTimesheetsPostRequest($body, $full = null)
    {
        // verify the required parameter 'body' is set
        if (null === $body || (\is_array($body) && 0 === \count($body))) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling apiTimesheetsPost');
        }
        if (null !== $full && !preg_match('/true/', $full)) {
            throw new \InvalidArgumentException('invalid value for "full" when calling TimesheetApi.apiTimesheetsPost, must conform to the pattern /true/.');
        }

        $resourcePath = '/api/timesheets';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (\is_array($full)) {
            $full = ObjectSerializer::serializeCollection($full, '', true);
        }
        if (null !== $full) {
            $queryParams['full'] = $full;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiTimesheetsRecentGet.
     *
     * Returns the collection of recent user activities
     *
     * @param string    $user  User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param \DateTime $begin Only records after this date will be included. Default: today - 1 year (format: HTML5) (optional)
     * @param string    $size  The amount of entries (default: 10) (optional)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\TimesheetCollectionExpanded[]
     */
    public function apiTimesheetsRecentGet($user = null, $begin = null, $size = null)
    {
        [$response] = $this->apiTimesheetsRecentGetWithHttpInfo($user, $begin, $size);

        return $response;
    }

    /**
     * Operation apiTimesheetsRecentGetWithHttpInfo.
     *
     * Returns the collection of recent user activities
     *
     * @param string    $user  User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param \DateTime $begin Only records after this date will be included. Default: today - 1 year (format: HTML5) (optional)
     * @param string    $size  The amount of entries (default: 10) (optional)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\TimesheetCollectionExpanded[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiTimesheetsRecentGetWithHttpInfo($user = null, $begin = null, $size = null)
    {
        $request = $this->apiTimesheetsRecentGetRequest($user, $begin, $size);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", (int) $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, (string) $request->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
            }

            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\TimesheetCollectionExpanded[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\TimesheetCollectionExpanded[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\TimesheetCollectionExpanded[]';
            if ('\SplFileObject' === $returnType) {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\TimesheetCollectionExpanded[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiTimesheetsRecentGetAsync.
     *
     * Returns the collection of recent user activities
     *
     * @param string    $user  User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param \DateTime $begin Only records after this date will be included. Default: today - 1 year (format: HTML5) (optional)
     * @param string    $size  The amount of entries (default: 10) (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsRecentGetAsync($user = null, $begin = null, $size = null)
    {
        return $this->apiTimesheetsRecentGetAsyncWithHttpInfo($user, $begin, $size)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiTimesheetsRecentGetAsyncWithHttpInfo.
     *
     * Returns the collection of recent user activities
     *
     * @param string    $user  User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param \DateTime $begin Only records after this date will be included. Default: today - 1 year (format: HTML5) (optional)
     * @param string    $size  The amount of entries (default: 10) (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiTimesheetsRecentGetAsyncWithHttpInfo($user = null, $begin = null, $size = null)
    {
        $returnType = '\Fiteco\KimaiClient\Model\TimesheetCollectionExpanded[]';
        $request = $this->apiTimesheetsRecentGetRequest($user, $begin, $size);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ('\SplFileObject' === $returnType) {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), (string) $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiTimesheetsRecentGet'.
     *
     * @param string    $user  User ID to filter timesheets. Needs permission &#39;view_other_timesheet&#39;, pass &#39;all&#39; to fetch data for all user (default: current user) (optional)
     * @param \DateTime $begin Only records after this date will be included. Default: today - 1 year (format: HTML5) (optional)
     * @param string    $size  The amount of entries (default: 10) (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiTimesheetsRecentGetRequest($user = null, $begin = null, $size = null)
    {
        if (null !== $user && !preg_match('/\\d+|all/', $user)) {
            throw new \InvalidArgumentException('invalid value for "user" when calling TimesheetApi.apiTimesheetsRecentGet, must conform to the pattern /\\d+|all/.');
        }

        if (null !== $size && !preg_match('/\\d+/', $size)) {
            throw new \InvalidArgumentException('invalid value for "size" when calling TimesheetApi.apiTimesheetsRecentGet, must conform to the pattern /\\d+/.');
        }

        $resourcePath = '/api/timesheets/recent';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (\is_array($user)) {
            $user = ObjectSerializer::serializeCollection($user, '', true);
        }
        if (null !== $user) {
            $queryParams['user'] = $user;
        }
        // query params
        if (\is_array($begin)) {
            $begin = ObjectSerializer::serializeCollection($begin, '', true);
        }
        if (null !== $begin) {
            $queryParams['begin'] = $begin;
        }
        // query params
        if (\is_array($size)) {
            $size = ObjectSerializer::serializeCollection($size, '', true);
        }
        if (null !== $size) {
            $queryParams['size'] = $size;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\Query::build($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\Query::build($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option.
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }
}
