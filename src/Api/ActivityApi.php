<?php

/**
 *
 * Kimai API Client 2020 — NOTICE OF LICENSE
 * This source file is released under MIT license by copyright holders.
 * @copyright 2017-2020 (c) Niko Granö (https://granö.fi)
 * @copyright 2014-2020 (c) Fiteco Group Oy (https://group.fiteco.fi)
 *
 */

/**
 * Kimai - API Docs.
 *
 * JSON API for the Kimai time-tracking software: [API documentation](https://www.kimai.org/documentation/rest-api.html), [Swagger definition file](doc.json)
 *
 * The version of the OpenAPI document: 0.6
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.2.1-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Fiteco\KimaiClient\Api;

use Fiteco\KimaiClient\ApiException;
use Fiteco\KimaiClient\Configuration;
use Fiteco\KimaiClient\HeaderSelector;
use Fiteco\KimaiClient\ObjectSerializer;
use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;

/**
 * ActivityApi Class Doc Comment.
 *
 * @category Class
 *
 * @author   OpenAPI Generator team
 *
 * @see     https://openapi-generator.tech
 */
class ActivityApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index.
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex)
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index.
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation apiActivitiesGet.
     *
     * Returns a collection of activities
     *
     * @param string $project      Project ID to filter activities (optional)
     * @param string $projects     Comma separated list of project IDs to filter activities (optional)
     * @param string $visible      Visibility status to filter activities. Allowed values: 1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;all (default: 1) (optional)
     * @param string $globals      Use if you want to fetch only global activities. Allowed values: true (default: false) (optional)
     * @param string $globalsFirst Deprecated parameter, value is not used any more (optional)
     * @param string $orderBy      The field by which results will be ordered. Allowed values: id, name, project (default: name) (optional)
     * @param string $order        The result order. Allowed values: ASC, DESC (default: ASC) (optional)
     * @param string $term         Free search term (optional)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\ActivityCollection[]
     */
    public function apiActivitiesGet($project = null, $projects = null, $visible = null, $globals = null, $globalsFirst = null, $orderBy = null, $order = null, $term = null)
    {
        [$response] = $this->apiActivitiesGetWithHttpInfo($project, $projects, $visible, $globals, $globalsFirst, $orderBy, $order, $term);

        return $response;
    }

    /**
     * Operation apiActivitiesGetWithHttpInfo.
     *
     * Returns a collection of activities
     *
     * @param string $project      Project ID to filter activities (optional)
     * @param string $projects     Comma separated list of project IDs to filter activities (optional)
     * @param string $visible      Visibility status to filter activities. Allowed values: 1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;all (default: 1) (optional)
     * @param string $globals      Use if you want to fetch only global activities. Allowed values: true (default: false) (optional)
     * @param string $globalsFirst Deprecated parameter, value is not used any more (optional)
     * @param string $orderBy      The field by which results will be ordered. Allowed values: id, name, project (default: name) (optional)
     * @param string $order        The result order. Allowed values: ASC, DESC (default: ASC) (optional)
     * @param string $term         Free search term (optional)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\ActivityCollection[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiActivitiesGetWithHttpInfo($project = null, $projects = null, $visible = null, $globals = null, $globalsFirst = null, $orderBy = null, $order = null, $term = null)
    {
        $request = $this->apiActivitiesGetRequest($project, $projects, $visible, $globals, $globalsFirst, $orderBy, $order, $term);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\ActivityCollection[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\ActivityCollection[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\ActivityCollection[]';
            $responseBody = $response->getBody();
            if ('\SplFileObject' === $returnType) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\ActivityCollection[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiActivitiesGetAsync.
     *
     * Returns a collection of activities
     *
     * @param string $project      Project ID to filter activities (optional)
     * @param string $projects     Comma separated list of project IDs to filter activities (optional)
     * @param string $visible      Visibility status to filter activities. Allowed values: 1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;all (default: 1) (optional)
     * @param string $globals      Use if you want to fetch only global activities. Allowed values: true (default: false) (optional)
     * @param string $globalsFirst Deprecated parameter, value is not used any more (optional)
     * @param string $orderBy      The field by which results will be ordered. Allowed values: id, name, project (default: name) (optional)
     * @param string $order        The result order. Allowed values: ASC, DESC (default: ASC) (optional)
     * @param string $term         Free search term (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiActivitiesGetAsync($project = null, $projects = null, $visible = null, $globals = null, $globalsFirst = null, $orderBy = null, $order = null, $term = null)
    {
        return $this->apiActivitiesGetAsyncWithHttpInfo($project, $projects, $visible, $globals, $globalsFirst, $orderBy, $order, $term)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiActivitiesGetAsyncWithHttpInfo.
     *
     * Returns a collection of activities
     *
     * @param string $project      Project ID to filter activities (optional)
     * @param string $projects     Comma separated list of project IDs to filter activities (optional)
     * @param string $visible      Visibility status to filter activities. Allowed values: 1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;all (default: 1) (optional)
     * @param string $globals      Use if you want to fetch only global activities. Allowed values: true (default: false) (optional)
     * @param string $globalsFirst Deprecated parameter, value is not used any more (optional)
     * @param string $orderBy      The field by which results will be ordered. Allowed values: id, name, project (default: name) (optional)
     * @param string $order        The result order. Allowed values: ASC, DESC (default: ASC) (optional)
     * @param string $term         Free search term (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiActivitiesGetAsyncWithHttpInfo($project = null, $projects = null, $visible = null, $globals = null, $globalsFirst = null, $orderBy = null, $order = null, $term = null)
    {
        $returnType = '\Fiteco\KimaiClient\Model\ActivityCollection[]';
        $request = $this->apiActivitiesGetRequest($project, $projects, $visible, $globals, $globalsFirst, $orderBy, $order, $term);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ('\SplFileObject' === $returnType) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiActivitiesGet'.
     *
     * @param string $project      Project ID to filter activities (optional)
     * @param string $projects     Comma separated list of project IDs to filter activities (optional)
     * @param string $visible      Visibility status to filter activities. Allowed values: 1&#x3D;visible, 2&#x3D;hidden, 3&#x3D;all (default: 1) (optional)
     * @param string $globals      Use if you want to fetch only global activities. Allowed values: true (default: false) (optional)
     * @param string $globalsFirst Deprecated parameter, value is not used any more (optional)
     * @param string $orderBy      The field by which results will be ordered. Allowed values: id, name, project (default: name) (optional)
     * @param string $order        The result order. Allowed values: ASC, DESC (default: ASC) (optional)
     * @param string $term         Free search term (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiActivitiesGetRequest($project = null, $projects = null, $visible = null, $globals = null, $globalsFirst = null, $orderBy = null, $order = null, $term = null)
    {
        if (null !== $project && !preg_match('/\\d+/', $project)) {
            throw new \InvalidArgumentException('invalid value for "project" when calling ActivityApi.apiActivitiesGet, must conform to the pattern /\\d+/.');
        }

        if (null !== $projects && !preg_match('/[\\d|,]+/', $projects)) {
            throw new \InvalidArgumentException('invalid value for "projects" when calling ActivityApi.apiActivitiesGet, must conform to the pattern /[\\d|,]+/.');
        }

        if (null !== $visible && !preg_match('/1|2|3/', $visible)) {
            throw new \InvalidArgumentException('invalid value for "visible" when calling ActivityApi.apiActivitiesGet, must conform to the pattern /1|2|3/.');
        }

        if (null !== $globals && !preg_match('/true/', $globals)) {
            throw new \InvalidArgumentException('invalid value for "globals" when calling ActivityApi.apiActivitiesGet, must conform to the pattern /true/.');
        }

        if (null !== $globalsFirst && !preg_match('/true|false/', $globalsFirst)) {
            throw new \InvalidArgumentException('invalid value for "globalsFirst" when calling ActivityApi.apiActivitiesGet, must conform to the pattern /true|false/.');
        }

        if (null !== $orderBy && !preg_match('/id|name|project/', $orderBy)) {
            throw new \InvalidArgumentException('invalid value for "orderBy" when calling ActivityApi.apiActivitiesGet, must conform to the pattern /id|name|project/.');
        }

        if (null !== $order && !preg_match('/ASC|DESC/', $order)) {
            throw new \InvalidArgumentException('invalid value for "order" when calling ActivityApi.apiActivitiesGet, must conform to the pattern /ASC|DESC/.');
        }

        $resourcePath = '/api/activities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if (\is_array($project)) {
            $project = ObjectSerializer::serializeCollection($project, '', true);
        }
        if (null !== $project) {
            $queryParams['project'] = $project;
        }
        // query params
        if (\is_array($projects)) {
            $projects = ObjectSerializer::serializeCollection($projects, '', true);
        }
        if (null !== $projects) {
            $queryParams['projects'] = $projects;
        }
        // query params
        if (\is_array($visible)) {
            $visible = ObjectSerializer::serializeCollection($visible, '', true);
        }
        if (null !== $visible) {
            $queryParams['visible'] = $visible;
        }
        // query params
        if (\is_array($globals)) {
            $globals = ObjectSerializer::serializeCollection($globals, '', true);
        }
        if (null !== $globals) {
            $queryParams['globals'] = $globals;
        }
        // query params
        if (\is_array($globalsFirst)) {
            $globalsFirst = ObjectSerializer::serializeCollection($globalsFirst, '', true);
        }
        if (null !== $globalsFirst) {
            $queryParams['globalsFirst'] = $globalsFirst;
        }
        // query params
        if (\is_array($orderBy)) {
            $orderBy = ObjectSerializer::serializeCollection($orderBy, '', true);
        }
        if (null !== $orderBy) {
            $queryParams['orderBy'] = $orderBy;
        }
        // query params
        if (\is_array($order)) {
            $order = ObjectSerializer::serializeCollection($order, '', true);
        }
        if (null !== $order) {
            $queryParams['order'] = $order;
        }
        // query params
        if (\is_array($term)) {
            $term = ObjectSerializer::serializeCollection($term, '', true);
        }
        if (null !== $term) {
            $queryParams['term'] = $term;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiActivitiesIdGet.
     *
     * Returns one activity
     *
     * @param int $id Activity ID to fetch (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\ActivityEntity
     */
    public function apiActivitiesIdGet($id)
    {
        [$response] = $this->apiActivitiesIdGetWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation apiActivitiesIdGetWithHttpInfo.
     *
     * Returns one activity
     *
     * @param int $id Activity ID to fetch (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\ActivityEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiActivitiesIdGetWithHttpInfo($id)
    {
        $request = $this->apiActivitiesIdGetRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\ActivityEntity' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\ActivityEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\ActivityEntity';
            $responseBody = $response->getBody();
            if ('\SplFileObject' === $returnType) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\ActivityEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiActivitiesIdGetAsync.
     *
     * Returns one activity
     *
     * @param int $id Activity ID to fetch (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiActivitiesIdGetAsync($id)
    {
        return $this->apiActivitiesIdGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiActivitiesIdGetAsyncWithHttpInfo.
     *
     * Returns one activity
     *
     * @param int $id Activity ID to fetch (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiActivitiesIdGetAsyncWithHttpInfo($id)
    {
        $returnType = '\Fiteco\KimaiClient\Model\ActivityEntity';
        $request = $this->apiActivitiesIdGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ('\SplFileObject' === $returnType) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiActivitiesIdGet'.
     *
     * @param int $id Activity ID to fetch (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiActivitiesIdGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiActivitiesIdGet');
        }

        $resourcePath = '/api/activities/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiActivitiesIdMetaPatch.
     *
     * Sets the value of a meta-field for an existing activity
     *
     * @param int                                    $id   Activity record ID to set the meta-field value for (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject $body body (optional)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\ActivityEntity
     */
    public function apiActivitiesIdMetaPatch($id, $body = null)
    {
        [$response] = $this->apiActivitiesIdMetaPatchWithHttpInfo($id, $body);

        return $response;
    }

    /**
     * Operation apiActivitiesIdMetaPatchWithHttpInfo.
     *
     * Sets the value of a meta-field for an existing activity
     *
     * @param int                                    $id   Activity record ID to set the meta-field value for (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject $body (optional)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\ActivityEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiActivitiesIdMetaPatchWithHttpInfo($id, $body = null)
    {
        $request = $this->apiActivitiesIdMetaPatchRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\ActivityEntity' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\ActivityEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\ActivityEntity';
            $responseBody = $response->getBody();
            if ('\SplFileObject' === $returnType) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\ActivityEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiActivitiesIdMetaPatchAsync.
     *
     * Sets the value of a meta-field for an existing activity
     *
     * @param int                                    $id   Activity record ID to set the meta-field value for (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiActivitiesIdMetaPatchAsync($id, $body = null)
    {
        return $this->apiActivitiesIdMetaPatchAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiActivitiesIdMetaPatchAsyncWithHttpInfo.
     *
     * Sets the value of a meta-field for an existing activity
     *
     * @param int                                    $id   Activity record ID to set the meta-field value for (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiActivitiesIdMetaPatchAsyncWithHttpInfo($id, $body = null)
    {
        $returnType = '\Fiteco\KimaiClient\Model\ActivityEntity';
        $request = $this->apiActivitiesIdMetaPatchRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ('\SplFileObject' === $returnType) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiActivitiesIdMetaPatch'.
     *
     * @param int                                    $id   Activity record ID to set the meta-field value for (required)
     * @param \Fiteco\KimaiClient\Model\InlineObject $body (optional)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiActivitiesIdMetaPatchRequest($id, $body = null)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiActivitiesIdMetaPatch');
        }

        $resourcePath = '/api/activities/{id}/meta';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'PATCH',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiActivitiesIdPatch.
     *
     * Update an existing activity
     *
     * @param int                                        $id   Activity ID to update (required)
     * @param \Fiteco\KimaiClient\Model\ActivityEditForm $body body (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\ActivityEntity
     */
    public function apiActivitiesIdPatch($id, $body)
    {
        [$response] = $this->apiActivitiesIdPatchWithHttpInfo($id, $body);

        return $response;
    }

    /**
     * Operation apiActivitiesIdPatchWithHttpInfo.
     *
     * Update an existing activity
     *
     * @param int                                        $id   Activity ID to update (required)
     * @param \Fiteco\KimaiClient\Model\ActivityEditForm $body (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\ActivityEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiActivitiesIdPatchWithHttpInfo($id, $body)
    {
        $request = $this->apiActivitiesIdPatchRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\ActivityEntity' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\ActivityEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\ActivityEntity';
            $responseBody = $response->getBody();
            if ('\SplFileObject' === $returnType) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\ActivityEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiActivitiesIdPatchAsync.
     *
     * Update an existing activity
     *
     * @param int                                        $id   Activity ID to update (required)
     * @param \Fiteco\KimaiClient\Model\ActivityEditForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiActivitiesIdPatchAsync($id, $body)
    {
        return $this->apiActivitiesIdPatchAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiActivitiesIdPatchAsyncWithHttpInfo.
     *
     * Update an existing activity
     *
     * @param int                                        $id   Activity ID to update (required)
     * @param \Fiteco\KimaiClient\Model\ActivityEditForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiActivitiesIdPatchAsyncWithHttpInfo($id, $body)
    {
        $returnType = '\Fiteco\KimaiClient\Model\ActivityEntity';
        $request = $this->apiActivitiesIdPatchRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ('\SplFileObject' === $returnType) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiActivitiesIdPatch'.
     *
     * @param int                                        $id   Activity ID to update (required)
     * @param \Fiteco\KimaiClient\Model\ActivityEditForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiActivitiesIdPatchRequest($id, $body)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiActivitiesIdPatch');
        }
        // verify the required parameter 'body' is set
        if (null === $body || (\is_array($body) && 0 === \count($body))) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling apiActivitiesIdPatch');
        }

        $resourcePath = '/api/activities/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'PATCH',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiActivitiesIdRatesGet.
     *
     * Returns a collection of all rates for one activity
     *
     * @param int $id The activity whose rates will be returned (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\ActivityRate[]
     */
    public function apiActivitiesIdRatesGet($id)
    {
        [$response] = $this->apiActivitiesIdRatesGetWithHttpInfo($id);

        return $response;
    }

    /**
     * Operation apiActivitiesIdRatesGetWithHttpInfo.
     *
     * Returns a collection of all rates for one activity
     *
     * @param int $id The activity whose rates will be returned (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\ActivityRate[], HTTP status code, HTTP response headers (array of strings)
     */
    public function apiActivitiesIdRatesGetWithHttpInfo($id)
    {
        $request = $this->apiActivitiesIdRatesGetRequest($id);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\ActivityRate[]' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\ActivityRate[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\ActivityRate[]';
            $responseBody = $response->getBody();
            if ('\SplFileObject' === $returnType) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\ActivityRate[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiActivitiesIdRatesGetAsync.
     *
     * Returns a collection of all rates for one activity
     *
     * @param int $id The activity whose rates will be returned (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiActivitiesIdRatesGetAsync($id)
    {
        return $this->apiActivitiesIdRatesGetAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiActivitiesIdRatesGetAsyncWithHttpInfo.
     *
     * Returns a collection of all rates for one activity
     *
     * @param int $id The activity whose rates will be returned (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiActivitiesIdRatesGetAsyncWithHttpInfo($id)
    {
        $returnType = '\Fiteco\KimaiClient\Model\ActivityRate[]';
        $request = $this->apiActivitiesIdRatesGetRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ('\SplFileObject' === $returnType) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiActivitiesIdRatesGet'.
     *
     * @param int $id The activity whose rates will be returned (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiActivitiesIdRatesGetRequest($id)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiActivitiesIdRatesGet');
        }

        $resourcePath = '/api/activities/{id}/rates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'GET',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiActivitiesIdRatesPost.
     *
     * Adds a new rate to an activity
     *
     * @param int                                        $id   The activity to add the rate for (required)
     * @param \Fiteco\KimaiClient\Model\ActivityRateForm $body body (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\ActivityRate
     */
    public function apiActivitiesIdRatesPost($id, $body)
    {
        [$response] = $this->apiActivitiesIdRatesPostWithHttpInfo($id, $body);

        return $response;
    }

    /**
     * Operation apiActivitiesIdRatesPostWithHttpInfo.
     *
     * Adds a new rate to an activity
     *
     * @param int                                        $id   The activity to add the rate for (required)
     * @param \Fiteco\KimaiClient\Model\ActivityRateForm $body (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\ActivityRate, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiActivitiesIdRatesPostWithHttpInfo($id, $body)
    {
        $request = $this->apiActivitiesIdRatesPostRequest($id, $body);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\ActivityRate' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\ActivityRate', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\ActivityRate';
            $responseBody = $response->getBody();
            if ('\SplFileObject' === $returnType) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\ActivityRate',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiActivitiesIdRatesPostAsync.
     *
     * Adds a new rate to an activity
     *
     * @param int                                        $id   The activity to add the rate for (required)
     * @param \Fiteco\KimaiClient\Model\ActivityRateForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiActivitiesIdRatesPostAsync($id, $body)
    {
        return $this->apiActivitiesIdRatesPostAsyncWithHttpInfo($id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiActivitiesIdRatesPostAsyncWithHttpInfo.
     *
     * Adds a new rate to an activity
     *
     * @param int                                        $id   The activity to add the rate for (required)
     * @param \Fiteco\KimaiClient\Model\ActivityRateForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiActivitiesIdRatesPostAsyncWithHttpInfo($id, $body)
    {
        $returnType = '\Fiteco\KimaiClient\Model\ActivityRate';
        $request = $this->apiActivitiesIdRatesPostRequest($id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ('\SplFileObject' === $returnType) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiActivitiesIdRatesPost'.
     *
     * @param int                                        $id   The activity to add the rate for (required)
     * @param \Fiteco\KimaiClient\Model\ActivityRateForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiActivitiesIdRatesPostRequest($id, $body)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiActivitiesIdRatesPost');
        }
        // verify the required parameter 'body' is set
        if (null === $body || (\is_array($body) && 0 === \count($body))) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling apiActivitiesIdRatesPost');
        }

        $resourcePath = '/api/activities/{id}/rates';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiActivitiesIdRatesRateIdDelete.
     *
     * Deletes one rate for an activity
     *
     * @param int $id     The activity whose rate will be removed (required)
     * @param int $rateId The rate to remove (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return void
     */
    public function apiActivitiesIdRatesRateIdDelete($id, $rateId)
    {
        $this->apiActivitiesIdRatesRateIdDeleteWithHttpInfo($id, $rateId);
    }

    /**
     * Operation apiActivitiesIdRatesRateIdDeleteWithHttpInfo.
     *
     * Deletes one rate for an activity
     *
     * @param int $id     The activity whose rate will be removed (required)
     * @param int $rateId The rate to remove (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiActivitiesIdRatesRateIdDeleteWithHttpInfo($id, $rateId)
    {
        $request = $this->apiActivitiesIdRatesRateIdDeleteRequest($id, $rateId);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }

            return [null, $statusCode, $response->getHeaders()];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }

            throw $e;
        }
    }

    /**
     * Operation apiActivitiesIdRatesRateIdDeleteAsync.
     *
     * Deletes one rate for an activity
     *
     * @param int $id     The activity whose rate will be removed (required)
     * @param int $rateId The rate to remove (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiActivitiesIdRatesRateIdDeleteAsync($id, $rateId)
    {
        return $this->apiActivitiesIdRatesRateIdDeleteAsyncWithHttpInfo($id, $rateId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiActivitiesIdRatesRateIdDeleteAsyncWithHttpInfo.
     *
     * Deletes one rate for an activity
     *
     * @param int $id     The activity whose rate will be removed (required)
     * @param int $rateId The rate to remove (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiActivitiesIdRatesRateIdDeleteAsyncWithHttpInfo($id, $rateId)
    {
        $returnType = '';
        $request = $this->apiActivitiesIdRatesRateIdDeleteRequest($id, $rateId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiActivitiesIdRatesRateIdDelete'.
     *
     * @param int $id     The activity whose rate will be removed (required)
     * @param int $rateId The rate to remove (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiActivitiesIdRatesRateIdDeleteRequest($id, $rateId)
    {
        // verify the required parameter 'id' is set
        if (null === $id || (\is_array($id) && 0 === \count($id))) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling apiActivitiesIdRatesRateIdDelete');
        }
        // verify the required parameter 'rateId' is set
        if (null === $rateId || (\is_array($rateId) && 0 === \count($rateId))) {
            throw new \InvalidArgumentException('Missing the required parameter $rateId when calling apiActivitiesIdRatesRateIdDelete');
        }

        $resourcePath = '/api/activities/{id}/rates/{rateId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // path params
        if (null !== $id) {
            $resourcePath = str_replace(
                '{'.'id'.'}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if (null !== $rateId) {
            $resourcePath = str_replace(
                '{'.'rateId'.'}',
                ObjectSerializer::toPathValue($rateId),
                $resourcePath
            );
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'DELETE',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation apiActivitiesPost.
     *
     * Creates a new activity
     *
     * @param \Fiteco\KimaiClient\Model\ActivityEditForm $body body (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return \Fiteco\KimaiClient\Model\ActivityEntity
     */
    public function apiActivitiesPost($body)
    {
        [$response] = $this->apiActivitiesPostWithHttpInfo($body);

        return $response;
    }

    /**
     * Operation apiActivitiesPostWithHttpInfo.
     *
     * Creates a new activity
     *
     * @param \Fiteco\KimaiClient\Model\ActivityEditForm $body (required)
     *
     * @throws \Fiteco\KimaiClient\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     *
     * @return array of \Fiteco\KimaiClient\Model\ActivityEntity, HTTP status code, HTTP response headers (array of strings)
     */
    public function apiActivitiesPostWithHttpInfo($body)
    {
        $request = $this->apiActivitiesPostRequest($body);

        try {
            $options = $this->createHttpClientOption();

            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException("[{$e->getCode()}] {$e->getMessage()}", $e->getCode(), $e->getResponse() ? $e->getResponse()->getHeaders() : null, $e->getResponse() ? (string) $e->getResponse()->getBody() : null);
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $request->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
            }

            $responseBody = $response->getBody();
            switch ($statusCode) {
                case 200:
                    if ('\Fiteco\KimaiClient\Model\ActivityEntity' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Fiteco\KimaiClient\Model\ActivityEntity', []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
            }

            $returnType = '\Fiteco\KimaiClient\Model\ActivityEntity';
            $responseBody = $response->getBody();
            if ('\SplFileObject' === $returnType) {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders(),
            ];
        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Fiteco\KimaiClient\Model\ActivityEntity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);

                    break;
            }

            throw $e;
        }
    }

    /**
     * Operation apiActivitiesPostAsync.
     *
     * Creates a new activity
     *
     * @param \Fiteco\KimaiClient\Model\ActivityEditForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiActivitiesPostAsync($body)
    {
        return $this->apiActivitiesPostAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation apiActivitiesPostAsyncWithHttpInfo.
     *
     * Creates a new activity
     *
     * @param \Fiteco\KimaiClient\Model\ActivityEditForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function apiActivitiesPostAsyncWithHttpInfo($body)
    {
        $returnType = '\Fiteco\KimaiClient\Model\ActivityEntity';
        $request = $this->apiActivitiesPostRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ('\SplFileObject' === $returnType) {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders(),
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();

                    throw new ApiException(sprintf('[%d] Error connecting to the API (%s)', $statusCode, $exception->getRequest()->getUri()), $statusCode, $response->getHeaders(), $response->getBody());
                }
            );
    }

    /**
     * Create request for operation 'apiActivitiesPost'.
     *
     * @param \Fiteco\KimaiClient\Model\ActivityEditForm $body (required)
     *
     * @throws \InvalidArgumentException
     *
     * @return \GuzzleHttp\Psr7\Request
     */
    public function apiActivitiesPostRequest($body)
    {
        // verify the required parameter 'body' is set
        if (null === $body || (\is_array($body) && 0 === \count($body))) {
            throw new \InvalidArgumentException('Missing the required parameter $body when calling apiActivitiesPost');
        }

        $resourcePath = '/api/activities';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['*/*']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['*/*'],
                []
            );
        }

        // for model (json/xml)
        if (isset($body)) {
            if ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($body));
            } else {
                $httpBody = $body;
            }
        } elseif (\count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = \is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name'     => $formParamName,
                            'contents' => $formParamValueItem,
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);
            } elseif ('application/json' === $headers['Content-Type']) {
                $httpBody = \GuzzleHttp\json_encode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-TOKEN');
        if (null !== $apiKey) {
            $headers['X-AUTH-TOKEN'] = $apiKey;
        }
        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-AUTH-USER');
        if (null !== $apiKey) {
            $headers['X-AUTH-USER'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);

        return new Request(
            'POST',
            $this->config->getHost().$resourcePath.($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option.
     *
     * @throws \RuntimeException on file opening failure
     *
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: '.$this->config->getDebugFile());
            }
        }

        return $options;
    }
}
